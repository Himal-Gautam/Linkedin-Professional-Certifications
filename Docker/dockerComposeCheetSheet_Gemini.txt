Got it, here's a separate cheat sheet for Docker Compose, including common commands and configuration options:

**Docker Compose Cheat Sheet**

**1. Basic Commands**

* **`docker-compose --version`:** Display the version of Docker Compose installed on your system.
* **`docker-compose up`:** 
   * Creates and starts containers defined in the `docker-compose.yml` file.
   * **`-d`**: Run containers in detached mode (background).
   * **`--build`**: Force rebuild of the images before creating containers.
   * **`--scale SERVICE=NUM`**: Scale a specific service to the desired number of containers.

* **`docker-compose down`:** Stops and removes containers, networks, volumes, and images created by `docker-compose up`.
   * **`-v`**: Also remove any volumes associated with the project.
   * **`--rmi all`**: Remove all images used by any service.

* **`docker-compose ps`:** List containers associated with the project.

* **`docker-compose logs`:** View the logs of one or more services.
   * **`-f`**: Follow log output.
   * **`--tail`**: Number of lines to show from the end of the logs.

* **`docker-compose exec SERVICE COMMAND [ARGS...]`**: Execute a command in a running container of a specific service.

* **`docker-compose build`:** Build or rebuild services.
   * **`--no-cache`**: Do not use cache when building the image.

* **`docker-compose config`:** Validate and view the Compose file.

**2. Compose File Configuration (docker-compose.yml)**

* **`version`:** Specify the Compose file version (e.g., '3.9').
* **`services`:** Define the services (containers) that make up your application.
    * **`image`:** Specify the Docker image to use.
    * **`build`:** Specify the path to a Dockerfile or a build context to build the image.
    * **`command`:** Override the default command specified in the image.
    * **`ports`:** Map ports between the container and the host (e.g., '8000:80').
    * **`volumes`:** Mount volumes from the host or other services (e.g., './data:/app/data').
    * **`environment`:** Set environment variables within the container.
    * **`depends_on`:** Define dependencies between services (start order).
    * **`networks`:** Connect the service to one or more networks.
    * **`deploy`:** Configure deployment options (replicas, resources, etc.).

* **`volumes`:** Define named volumes for data persistence.

* **`networks`:** Define custom networks for communication between services.

**3. Advanced Commands**

* **`docker-compose start`:** Start existing containers for services.
* **`docker-compose stop`:** Stop running containers without removing them.
* **`docker-compose restart`:** Restart services.
* **`docker-compose rm`**: Remove stopped service containers.
* **`docker-compose pull`**: Pull service images.
* **`docker-compose push`**: Push service images.
* **`docker-compose events`**: Receive real-time events from containers.
* **`docker-compose port SERVICE PRIVATE_PORT`**: Display the public port for a specific service's private port.

**Remember:**

* **`docker-compose.yml`**: The core configuration file for Docker Compose, defining services, networks, and volumes.
* **`docker-compose.override.yml`**: An optional file to override settings in the main `docker-compose.yml` file.

This cheat sheet provides an overview of essential Docker Compose commands and configuration. For more detailed information and advanced use cases, always refer to the official Docker Compose documentation.

Please let me know if you have any specific questions or would like more elaboration on certain commands! 

Absolutely, let's update the fake Dockerfile example with the `docker-compose.yml` file to showcase how they work together:

**Fake Dockerfile (app.Dockerfile)**

```Dockerfile
# This is a fake Dockerfile for demonstration purposes

# Set the base image to the official Node.js image
FROM node:18-alpine

# Metadata labels for the image
LABEL maintainer="Your Name <yourname@example.com>" \
      version="1.0" \
      description="A fake Node.js application for demonstration"

# Set an environment variable
ENV NODE_ENV=production

# Create a directory for the application code
RUN mkdir -p /app

# Set the working directory
WORKDIR /app

# Copy package.json and package-lock.json (if available)
COPY package*.json ./

# Install dependencies
RUN npm install

# Copy the rest of the application code
COPY . .

# Expose port 3000 for the application
EXPOSE 3000

# Define a healthcheck command
HEALTHCHECK --interval=30s --timeout=10s \
  CMD curl -f http://localhost:3000/health || exit 1

# Specify the default command to run when the container starts
CMD ["npm", "start"]
```

**Docker Compose File (docker-compose.yml)**

```yaml
version: '3.9'  # Specify Docker Compose file version

services:
  app:  # Define the 'app' service
    build: 
      context: .  # Build context is the current directory
      dockerfile: app.Dockerfile  # Use the 'app.Dockerfile'
    ports:
      - "3000:3000"  # Map port 3000 from the container to the host
    volumes:
      - ./app:/app  # Mount the 'app' directory for code changes
    environment:
      - MY_ENV_VAR=some_value  # Set an environment variable in the container
```

**Explanation**

* **`app.Dockerfile`**: Contains instructions to build the Node.js application image.
* **`docker-compose.yml`**: Defines the `app` service, which uses the `app.Dockerfile` to build the image. It also:
    * Maps port 3000 from the container to the host.
    * Mounts the `./app` directory from the host into the container at `/app`, allowing you to make code changes without rebuilding the image.
    * Sets an environment variable `MY_ENV_VAR` within the container.

**How to Use**

1. Make sure you have both `app.Dockerfile` and `docker-compose.yml` in the same directory.
2. Run `docker-compose up` to build the image (using the Dockerfile) and start the container.
3. Access your application at `http://localhost:3000`.
4. Make changes to your code in the `app` directory on your host machine. The changes will be reflected in the running container without needing to rebuild.

**Key Points**

* Docker Compose simplifies the management of multi-container applications.
* The `docker-compose.yml` file defines the services, networks, and volumes for your application.
* You can use `build` in the `docker-compose.yml` to reference a Dockerfile for building images.
* Docker Compose provides features like port mapping, volume mounting, and environment variable setting.

Feel free to modify and enhance this example to fit your specific project needs. Let me know if you have any more questions or want to explore specific Docker Compose features! 

